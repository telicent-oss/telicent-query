# Build and push telicent-test
on:
  push:
    branches:
      - main
    paths:
      - CHANGELOG.md
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      semver: ${{ steps.semver.outputs.current-version }}
      app_name: ${{ steps.app_config.outputs.app_name }}
      image_name: ${{ steps.app_config.outputs.image_name }}
      repo_name: ${{ steps.app_config.outputs.repo_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Get version from package.json
        id: semver
        uses: martinbeentjes/npm-get-version-action@main
      - run: sudo apt-get install jq
      - id: app_config
        run: |
          APP_NAME=$(jq -r '.app_name // error("app_name missing")' ./src/app.config.json) && \
            echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT;
          IMAGE_NAME=$(jq -r '.image_name // error("image_name missing")' ./src/app.config.json) && \
            echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT;
          REPO_NAME=$(jq -r '.repo_name // error("repo_name missing")' ./src/app.config.json) && \
            echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT;

  integrated_tests:
    permissions:
      id-token: write
      contents: read
      packages: write
    needs:
      - prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: configure-node
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Get node version
        id: node
        run: echo "version=$(node -v)" >> $GITHUB_OUTPUT
      - name: Get node_modules cache
        uses: actions/cache@v3.0.2
        id: node_modules
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}-${{ steps.node.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}-${{ steps.node.outputs.version }}
      - name: Install dependencies
        run: LOCAL_MACHINE=false yarn install --network-concurrency 3 # Network concurrency to avoid rate-limiting
      - run: git diff .
      - run: yarn global add jest && yarn test:ci

  build_application:
    permissions:
      id-token: write
      contents: read
      packages: write
    needs:
      - prepare
      - integrated_tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: configure-node
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Get node version
        id: node
        run: echo "version=$(node -v)" >> $GITHUB_OUTPUT
      - name: Get node_modules cache
        uses: actions/cache@v3.0.2
        id: node_modules
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}-${{ steps.node.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}-${{ steps.node.outputs.version }}
      - name: Install dependencies
        run: LOCAL_MACHINE=false yarn install --network-concurrency 1 # Network concurrency to avoid rate-limiting
      - name: Build application
        run: yarn build:tailwind && LOCAL_MACHINE=false yarn build
      - name: Upload build to artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build/

  vuln_scan:
    needs:
      - prepare
      - integrated_tests
    uses: telicent-oss/shared-workflows/.github/workflows/vulnerability-scanning-on-repo.yml@main
    with:
      APP_NAME: ${{ needs.prepare.outputs.app_name }}
    secrets: inherit

  build_deployment_image:
    permissions:
      id-token: write
      contents: write
      packages: write
    needs:
      - prepare
      - vuln_scan
      - build_application
    uses: telicent-oss/shared-workflows/.github/workflows/docker-push-to-registries.yml@main
    with:
      APP_NAME: ${{ needs.prepare.outputs.app_name }}
      DOCKERFILE: Dockerfile
      PATH: .
      VERSION: ${{ needs.prepare.outputs.semver }}
      BUILD_ARTIFACT: build
      ENABLE_BUILDKIT_CACHE: false
      ALLOW_MUTABLE_TAGS: false
      DRY_RUN: ${{ github.ref != 'refs/heads/main' }}
    secrets: inherit
